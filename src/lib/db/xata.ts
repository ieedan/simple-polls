// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "polls",
    columns: [
      { name: "content", type: "string", defaultValue: "" },
      { name: "upvotes", type: "int", notNull: true, defaultValue: "0" },
      { name: "created_by", type: "string" },
      { name: "downvotes", type: "int", notNull: true, defaultValue: "0" },
    ],
    revLinks: [{ column: "poll_id", table: "votes" }],
  },
  {
    name: "votes",
    columns: [
      { name: "poll_id", type: "link", link: { table: "polls" } },
      { name: "created_by", type: "string" },
      { name: "type", type: "text" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Polls = InferredTypes["polls"];
export type PollsRecord = Polls & XataRecord;

export type Votes = InferredTypes["votes"];
export type VotesRecord = Votes & XataRecord;

export type DatabaseSchema = {
  polls: PollsRecord;
  votes: VotesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Aidan-Bleser-s-workspace-tbp85o.us-east-1.xata.sh/db/not-alone",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
